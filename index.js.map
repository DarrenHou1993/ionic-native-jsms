{"version":3,"sources":["../../../src/@ionic-native/plugins/j-sms/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;GAWG;AACH,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;GAcG;AAWH;IAA0B,wBAAiB;IAA3C;;IAwEA,CAAC;IAtEC;;QAEI;IAKJ,mBAAI,GAAJ,cAAe,CAAC;IAChB;;;OAGG;IAKH,2BAAY,GAAZ,UAAa,OAAgB,IAAkB,MAAM,CAAC,CAAC,CAAC;IACxD;;;;OAIG;IAKH,yBAAU,GAAV,UAAW,QAAgB,EAAE,MAAc,IAAkB,MAAM,CAAC,CAAC,CAAC;IACtE;;;OAGG;IAKH,2BAAY,GAAZ,UAAa,QAAgB,IAAkB,MAAM,CAAC,CAAC,CAAC;IACxD;;;;OAIG;IAKH,2BAAY,GAAZ,UAAa,QAAgB,EAAE,IAAY,IAAkB,MAAM,CAAC,CAAC,CAAC;IACtE;;;OAGG;IAKH,8BAAe,GAAf,UAAgB,YAAoB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAC/D;;OAEG;IAKH,8BAAe,GAAf,cAAqC,MAAM,CAAC,CAAC,CAAC;IAEzC,eAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,mBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA9DA;QAJC,OAAO,CAAC;YACP,IAAI,EAAE,IAAI;YACV,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;;;;oCACc;IAShB;QAJC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;YACxB,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;;;;4CACsD;IAUxD;QAJC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;YACxB,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;;;;0CACoE;IAStE;QAJC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;YACxB,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;;;;4CACsD;IAUxD;QAJC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;YACxB,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;;;;4CACoE;IAStE;QAJC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;YACxB,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;;;;+CAC6D;IAQ/D;QAJC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;YACxB,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;;;;+CAC4C;IAhEnC,IAAI;QAVhB,MAAM,CAAC;YACN,UAAU,EAAE,MAAM;YAClB,MAAM,EAAE,qBAAqB;YAC7B,SAAS,EAAE,aAAa;YACxB,IAAI,EAAE,kDAAkD;YACxD,OAAO,EAAE,wCAAwC;YACjD,gBAAgB,EAAE,CAAC,SAAS,CAAC;YAC7B,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,IAAI,CAwEhB;IAAD,WAAC;CAxED,AAwEC,CAxEyB,iBAAiB,GAwE1C;SAxEY,IAAI","file":"index.js","sourceRoot":"","sourcesContent":["/**\n * This is a template for new plugin wrappers\n *\n * TODO:\n * - Add/Change information below\n * - Document usage (importing, executing main functionality)\n * - Remove any imports that you are not using\n * - Add this file to /src/index.ts (follow style of other plugins)\n * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added\n * - Remove this note\n *\n */\nimport { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\n/**\n * @name J Sms\n * @description\n * This plugin does something\n *\n * @usage\n * ```typescript\n * import { JSms } from '@ionic-native/j-sms';\n *\n *\n * constructor(private jSms: JSms) { }\n *\n * ...\n * ```\n */\n@Plugin({\n  pluginName: 'JSms',\n  plugin: 'cordova-plugin-jsms',\n  pluginRef: 'window.jsms',\n  repo: 'https://github.com/jpush/cordova-plugin-jsms.git',\n  install: 'cordova plugin add cordova-plugin-jsms',\n  installVariables: ['APP_KEY'],\n  platforms: ['Android', 'iOS']\n})\n\nexport class JSms extends IonicNativePlugin {\n\n  /**\n    * 初始化 JSMS 功能，主要是检测一些配置信息，如果配置错误将初始化失败，打印错误日志，调用其他接口前必须先初始化。\n    */\n  @Cordova({\n    sync: true,\n    platforms: ['Android', 'iOS']\n  })\n  init(): void { }\n  /**\n   * 是否开启 JSMS Debug 模式\n   * @param enabled 是否开启\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    platforms: ['Android', 'iOS']\n  })\n  setDebugMode(enabled: boolean): Promise<any> { return; }\n  /**\n   * 请求短信验证码\n   * @param phoneNum 字符串，要接收短信验证码的手机号\n   * @param tempId  字符串，短信模板 ID。\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    platforms: ['Android', 'iOS']\n  })\n  getSmsCode(phoneNum: string, tempId: string): Promise<any> { return; }\n  /**\n   * 获取语音验证码\n   * @param phoneNum 字符串，手机号码。\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    platforms: ['Android', 'iOS']\n  })\n  getVoiceCode(phoneNum: string): Promise<any> { return; }\n  /**\n   * 验证用户输入的短信验证码\n   * @param phoneNum 字符串，手机号码。\n   * @param code 字符串，用户输入的验证码。\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    platforms: ['Android', 'iOS']\n  })\n  checkSmsCode(phoneNum: string, code: string): Promise<any> { return; }\n  /**\n   * 设置前后两次获取验证码的时间间隔，默认为 30 秒\n   * @param intervalTime 间隔时间，单位是毫秒\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    platforms: ['Android', 'iOS']\n  })\n  setIntervalTime(intervalTime: number): Promise<any> { return; }\n  /**\n   * 获取当前设置的时间间隔\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    platforms: ['Android', 'iOS']\n  })\n  getIntervalTime(): Promise<number> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}